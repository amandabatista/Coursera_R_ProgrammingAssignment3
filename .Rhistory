## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
}
corr("specdata", 1000)
cr <- corr("specdata", 150)
head(cr)
summary(cr)
corr <- function(directory, threshold = 0){
## Returns data frame with number of complete cases on each file
completeCases <- complete(directory)
correlationsVector <- c()
for (i in 1:nrow(completeCases)) {
if (completeCases[i, "nobs"] > threshold){
## Load data frame with file observations
monitorData <- read.csv(paste (directory, sep = "/", sprintf("%03d.csv", completeCases[i, "id"])))
monitorData <- monitorData[!is.na(monitorData$nitrate) & !is.na(monitorData$sulfate),]
correlationsVector <- rbind(correlationsVector, cor(monitorData["sulfate"], monitorData["nitrate"]))
}
}
correlationsVector
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0){
## Returns data frame with number of complete cases on each file
completeCases <- complete(directory)
correlationsVector <- c()
for (i in 1:nrow(completeCases)) {
if (completeCases[i, "nobs"] > threshold){
## Load data frame with file observations
monitorData <- read.csv(paste (directory, sep = "/", sprintf("%03d.csv", completeCases[i, "id"])))
monitorData <- monitorData[!is.na(monitorData$nitrate) & !is.na(monitorData$sulfate),]
correlationsVector <- rbind(correlationsVector, cor(monitorData["sulfate"], monitorData["nitrate"], method = "spearman"))
}
}
correlationsVector
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0){
## Returns data frame with number of complete cases on each file
completeCases <- complete(directory)
correlationsVector <- c()
for (i in 1:nrow(completeCases)) {
if (completeCases[i, "nobs"] > threshold){
## Load data frame with file observations
monitorData <- read.csv(paste (directory, sep = "/", sprintf("%03d.csv", completeCases[i, "id"])))
monitorData <- monitorData[!is.na(monitorData$nitrate) & !is.na(monitorData$sulfate),]
correlationsVector <- rbind(correlationsVector, cor(monitorData["sulfate"], monitorData["nitrate"]))
}
}
correlationsVector
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0){
## Returns data frame with number of complete cases on each file
completeCases <- complete(directory)
correlationsVector <- c()
for (i in 1:nrow(completeCases)) {
if (completeCases[i, "nobs"] > threshold){
## Load data frame with file observations
monitorData <- read.csv(paste (directory, sep = "/", sprintf("%03d.csv", completeCases[i, "id"])))
##monitorData <- monitorData[!is.na(monitorData$nitrate) & !is.na(monitorData$sulfate),]
correlationsVector <- rbind(correlationsVector, cor(monitorData["sulfate"], monitorData["nitrate"]))
}
}
correlationsVector
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0){
## Builds a list with files names
filesNames <- paste (directory, sep = "/", sprintf("%03d.csv", 1:332))
correlationsVector <- c()
## loop files list to get data
for (file_name in filesNames) {
monitorData <- read.csv(file_name)
## Returns complete cases of monitor's data
monitorData <- complete.cases(monitorData)
if (sum(monitorData) > threshold){
correlationsVector <- rbind(correlationsVector, cor(monitorData["sulfate"], monitorData["nitrate"]))
}
}
correlationsVector
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0){
## Builds a list with files names
filesNames <- paste (directory, sep = "/", sprintf("%03d.csv", 1:332))
correlationsVector <- c()
## loop files list to get data
for (file_name in filesNames) {
monitorData <- read.csv(file_name)
if (sum(complete.cases(monitorData)) > threshold){
correlationsVector <- rbind(correlationsVector, cor(monitorData["sulfate"], monitorData["nitrate"]))
}
}
correlationsVector
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0){
## Builds a list with files names
filesNames <- paste (directory, sep = "/", sprintf("%03d.csv", 1:332))
correlationsVector <- c()
## loop files list to get data
for (file_name in filesNames) {
monitorData <- read.csv(file_name)
if (sum(complete.cases(monitorData)) > threshold){
correlationsVector <- rbind(correlationsVector, cor(monitorData["sulfate"], monitorData["nitrate"], na.rm = TRUE))
}
}
correlationsVector
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0){
## Builds a list with files names
filesNames <- paste (directory, sep = "/", sprintf("%03d.csv", 1:332))
correlationsVector <- c()
## loop files list to get data
for (file_name in filesNames) {
monitorData <- read.csv(file_name)
if (sum(complete.cases(monitorData)) > threshold){
correlationsVector <- rbind(correlationsVector, cor(na.rm(monitorData["sulfate"]), monitorData["nitrate"]))
}
}
correlationsVector
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0){
## Builds a list with files names
filesNames <- paste (directory, sep = "/", sprintf("%03d.csv", 1:332))
correlationsVector <- c()
## loop files list to get data
for (file_name in filesNames) {
monitorData <- read.csv(file_name)
if (sum(complete.cases(monitorData)) > threshold){
sulfateData <- monitorData[!is.na(monitorData$nitrate) & !is.na(monitorData$sulfate), "sulfate"]
nitrateData <- monitorData[!is.na(monitorData$nitrate) & !is.na(monitorData$sulfate), "nitrate"]
correlationsVector <- rbind(correlationsVector, cor(sulfateData, nitrateData))
}
}
correlationsVector
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 4000)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
cr <- corr("specdata")
length(cr)
pollutantmean <- function(directory, pollutant, id = 1:332){
## creates a vector with the files names (includind paths)
filesNames <- paste (directory, sep = "/", sprintf("%03d.csv", id))
## creates a vector that will combine pollutant values from all files specified on arguments list
pollutant_data <- c()
## loop files list to get pollutant data
for (file_name in filesNames) {
monitorData <- read.csv(file_name)
## vector merging to acumulate pollutant data from different files
pollutant_data <- c(pollutant_data, monitorData[,pollutant])
}
## returns mean from pollutant data on specified data - discarding NA values
## without rounding value as oriented on the prototype of the function
mean(pollutant_data, na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use,"nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
## These two functions (makeCacheMatrix and cacheSolve) goal is to cache the inverse of a matrix taking advantage of
## lexical scoping
## Creates an R special object that stores a matrix and its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
## x and inv were instanciated on parent environment (makeCacheMatrix scope). So we can use the <<- operator to set (or reset)
## these objects values on the parent environment.
x <<- y
inv <<- NULL
}
## get is a nested function. So we can get x value from parent environment (lexical scoping)
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
## returns a list with the functions to manipulate the matrix and its inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function returns the inverse of the special "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
## If the inverse has already been calculated (and the matrix has not changed), then retrieves the inverse from the cache.
x_inverse <- x$getInverse()
if(!is.null(x_inverse)) {
message("getting cached data")
return(x_inverse)
}
## If the inverse does not exists on cache, then calculates the inverse matrix of x, stores and returns it.
data <- x$get()
x_inverse <- solve(data)
x$setInverse(x_inverse)
x_inverse
}
myMatrix <- matrix( c(2, 2, 3, 5), nrow=2,ncol=2)
myMatrix
myCacheMatrix <- makeCacheMatrix(myMatrix)
cacheSolve(myCacheMatrix)
myMatrix <- matrix( c(2, 4, 1, 3), nrow=2,ncol=2)
myCacheMatrix <- makeCacheMatrix(myMatrix)
cacheSolve(myCacheMatrix)
myMatrix <- matrix( c(1, 2, 3, 0), nrow=2,ncol=2)
myCacheMatrix <- makeCacheMatrix(myMatrix)
cacheSolve(myCacheMatrix)
myMatrix <- matrix( c(3, 9, 1, 0, 1, 0, 2, 7, 1), nrow=3,ncol=3)
myCacheMatrix <- makeCacheMatrix(myMatrix)
cacheSolve(myCacheMatrix)
rankall <- function(outcome, num = "best") {
## Read outcome data
fileData <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
## Defines a vector to test argument and after select outcome columns
outcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!outcome %in% names(outcomes)){
stop("invalid outcome")
}
## If the number given by num is larger than the number of hospitals in that state, then the function should return NA
if (is.numeric(num) & num > length(unique(fileData$State))){
return(NA)
}
if (!is.numeric(num) & !num %in% c("best", "worst")){
stop("invalid num argument")
}
## Reducing data that will be manipulated (columns Hospital Name = 2, State = 7, Outcome - function argument)
outcomeStateData <- fileData[, c(2, 7, outcomes[outcome])]
names(outcomeStateData) <- c("hospital", "state", "outcome")
## Discards incomplete cases. So hospitals that do not have data on a particular outcome will be
## excluded from the set of hospitals when deciding the rankings.
outcomeStateData <- na.omit(outcomeStateData)
## Sort it first by state, then outcome rate. The lowest rate will be on the top of the list, so it will be ranked.
## After, sorts by alphabetical order by Hospital Name. So  ties should be broken by using the hospital name.
outcomeStateData <- outcomeStateData[order(outcomeStateData$state, outcomeStateData$outcome, outcomeStateData$hospital),]
splitDataByState <- split(outcomeStateData, outcomeStateData$state)
class(splitDataByState)
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
tail(rankall("heart failure"), 10)
setwd("C:/Users/Amandinha/Projects/Coursera_R_ProgrammingAssignment3")
rankall <- function(outcome, num = "best") {
## Read outcome data
fileData <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
## Defines a vector to test argument and after select outcome columns
outcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!outcome %in% names(outcomes)){
stop("invalid outcome")
}
## If the number given by num is larger than the number of hospitals in that state, then the function should return NA
if (is.numeric(num) & num > length(unique(fileData$State))){
return(NA)
}
if (!is.numeric(num) & !num %in% c("best", "worst")){
stop("invalid num argument")
}
## Reducing data that will be manipulated (columns Hospital Name = 2, State = 7, Outcome - function argument)
outcomeStateData <- fileData[, c(2, 7, outcomes[outcome])]
names(outcomeStateData) <- c("hospital", "state", "outcome")
## Discards incomplete cases. So hospitals that do not have data on a particular outcome will be
## excluded from the set of hospitals when deciding the rankings.
outcomeStateData <- na.omit(outcomeStateData)
## Sort it first by state, then outcome rate. The lowest rate will be on the top of the list, so it will be ranked.
## After, sorts by alphabetical order by Hospital Name. So  ties should be broken by using the hospital name.
outcomeStateData <- outcomeStateData[order(outcomeStateData$state, outcomeStateData$outcome, outcomeStateData$hospital),]
splitDataByState <- split(outcomeStateData, outcomeStateData$state)
class(splitDataByState)
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
tail(rankall("heart failure"), 10)
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
fileData <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
## Defines a vector to test argument and after select outcome columns
outcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!outcome %in% names(outcomes)){
stop("invalid outcome")
}
## If the number given by num is larger than the number of hospitals in that state, then the function should return NA
if (is.numeric(num) & num > length(unique(fileData$State))){
return(NA)
}
if (!is.numeric(num) & !num %in% c("best", "worst")){
stop("invalid num argument")
}
## Reducing data that will be manipulated (columns Hospital Name = 2, State = 7, Outcome - function argument)
outcomeStateData <- fileData[, c(2, 7, outcomes[outcome])]
names(outcomeStateData) <- c("hospital", "state", "outcome")
## Discards incomplete cases. So hospitals that do not have data on a particular outcome will be
## excluded from the set of hospitals when deciding the rankings.
outcomeStateData <- na.omit(outcomeStateData)
## Sort it first by state, then outcome rate. The lowest rate will be on the top of the list, so it will be ranked.
## After, sorts by alphabetical order by Hospital Name. So  ties should be broken by using the hospital name.
outcomeStateData <- outcomeStateData[order(outcomeStateData$state, outcomeStateData$outcome, outcomeStateData$hospital),]
splitDataByState <- split(outcomeStateData, outcomeStateData$state)
splitDataByState
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
fileData <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
## Defines a vector to test argument and after select outcome columns
outcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!outcome %in% names(outcomes)){
stop("invalid outcome")
}
## If the number given by num is larger than the number of hospitals in that state, then the function should return NA
if (is.numeric(num) & num > length(unique(fileData$State))){
return(NA)
}
if (!is.numeric(num) & !num %in% c("best", "worst")){
stop("invalid num argument")
}
## Reducing data that will be manipulated (columns Hospital Name = 2, State = 7, Outcome - function argument)
outcomeStateData <- fileData[, c(2, 7, outcomes[outcome])]
names(outcomeStateData) <- c("hospital", "state", "outcome")
## Discards incomplete cases. So hospitals that do not have data on a particular outcome will be
## excluded from the set of hospitals when deciding the rankings.
outcomeStateData <- na.omit(outcomeStateData)
## Sort it first by state, then outcome rate. The lowest rate will be on the top of the list, so it will be ranked.
## After, sorts by alphabetical order by Hospital Name. So  ties should be broken by using the hospital name.
outcomeStateData <- outcomeStateData[order(outcomeStateData$state, outcomeStateData$outcome, outcomeStateData$hospital),]
## Split the data into a list of data frames separated by state
splitDataByState <- split(outcomeStateData, outcomeStateData$state)
rankByState <- function(data, num){
if (num == "best"){
rankingResult <- head(data$hospital, 1)
} else if (num == "worst"){
rankingResult <- tail(data$hospital, 1)
} else {
rankingResult <- data$hospital[num]
}
}
## applies the function to get the ranked hospital for each data frame (by state)
lapply(splitDataByState, rankByState)
## splitDataByState
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
fileData <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
## Defines a vector to test argument and after select outcome columns
outcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!outcome %in% names(outcomes)){
stop("invalid outcome")
}
## If the number given by num is larger than the number of hospitals in that state, then the function should return NA
if (is.numeric(num) & num > length(unique(fileData$State))){
return(NA)
}
if (!is.numeric(num) & !num %in% c("best", "worst")){
stop("invalid num argument")
}
## Reducing data that will be manipulated (columns Hospital Name = 2, State = 7, Outcome - function argument)
outcomeStateData <- fileData[, c(2, 7, outcomes[outcome])]
names(outcomeStateData) <- c("hospital", "state", "outcome")
## Discards incomplete cases. So hospitals that do not have data on a particular outcome will be
## excluded from the set of hospitals when deciding the rankings.
outcomeStateData <- na.omit(outcomeStateData)
## Sort it first by state, then outcome rate. The lowest rate will be on the top of the list, so it will be ranked.
## After, sorts by alphabetical order by Hospital Name. So  ties should be broken by using the hospital name.
outcomeStateData <- outcomeStateData[order(outcomeStateData$state, outcomeStateData$outcome, outcomeStateData$hospital),]
## Split the data into a list of data frames separated by state
splitDataByState <- split(outcomeStateData, outcomeStateData$state)
rankByState <- function(data, ranking = num){
if (ranking == "best"){
rankingResult <- head(data$hospital, 1)
} else if (ranking == "worst"){
rankingResult <- tail(data$hospital, 1)
} else {
rankingResult <- data$hospital[ranking]
}
}
## applies the function to get the ranked hospital for each data frame (by state)
lapply(splitDataByState, rankByState)
## splitDataByState
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
fileData <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
## Defines a vector to test argument and after select outcome columns
outcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!outcome %in% names(outcomes)){
stop("invalid outcome")
}
## If the number given by num is larger than the number of hospitals in that state, then the function should return NA
if (is.numeric(num) & num > length(unique(fileData$State))){
return(NA)
}
if (!is.numeric(num) & !num %in% c("best", "worst")){
stop("invalid num argument")
}
## Reducing data that will be manipulated (columns Hospital Name = 2, State = 7, Outcome - function argument)
outcomeStateData <- fileData[, c(2, 7, outcomes[outcome])]
names(outcomeStateData) <- c("hospital", "state", "outcome")
## Discards incomplete cases. So hospitals that do not have data on a particular outcome will be
## excluded from the set of hospitals when deciding the rankings.
outcomeStateData <- na.omit(outcomeStateData)
## Sort it first by state, then outcome rate. The lowest rate will be on the top of the list, so it will be ranked.
## After, sorts by alphabetical order by Hospital Name. So  ties should be broken by using the hospital name.
outcomeStateData <- outcomeStateData[order(outcomeStateData$state, outcomeStateData$outcome, outcomeStateData$hospital),]
## Split the data into a list of data frames separated by state
splitDataByState <- split(outcomeStateData, outcomeStateData$state)
rankByState <- function(data, ranking = num){
if (ranking == "best"){
rankingResult <- head(data$hospital, 1)
} else if (ranking == "worst"){
rankingResult <- tail(data$hospital, 1)
} else {
rankingResult <- data$hospital[ranking]
}
}
## applies the function to get the ranked hospital for each data frame (by state)
sapply(splitDataByState, rankByState)
## splitDataByState
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
rankall("heart failure")
head(rankall("heart failure"))
